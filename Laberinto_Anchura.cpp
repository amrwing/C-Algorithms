#include <iostream>
#include <Windows.h>
#include <unistd.h>
#include <vector>
#include <queue>
#include <time.h>
#include <stdlib.h>
#include <algorithm>
using namespace std;
vector <bool> marca;
queue <pair <int,int> > cola;
class Grafo{
int temp;
int mataux[100][100]={
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
            {-1,00,-1,-1,-1,-1,-1,00,00,00,00,00,00,00,00,00,00,00,00,00,-1,00,00,00,00,00,00,00,00,00,-1},
            {-1,00,00,00,00,00,00,00,-1,00,-1,-1,-1,-1,-1,-1,-1,00,-1,00,-1,-1,-1,-1,00,-1,00,-1,00,-1,-1},
            {-1,00,-1,00,00,-1,-1,00,-1,00,-1,00,00,-1,00,00,-1,00,-1,00,-1,-1,-1,00,-1,-1,00,-1,00,-1,-1},
            {-1,00,-1,-1,00,00,-1,00,-1,00,-1,00,-1,-1,00,-1,-1,00,-1,00,-1,00,00,00,00,00,00,00,00,00,-1},
            {-1,00,00,00,-1,-1,-1,-1,-1,-1,-1,00,-1,00,00,-1,00,00,-1,00,-1,-1,-1,00,-1,-1,-1,-1,00,-1,-1},
            {-1,00,-1,-1,-1,00,00,-1,00,00,-1,00,00,-1,00,-1,00,-1,-1,00,-1,-1,00,00,00,00,00,00,00,00,-1},
            {-1,00,-1,-1,-1,00,-1,-1,-1,00,-1,00,-1,-1,00,00,00,-1,00,00,00,-1,00,-1,00,-1,00,-1,00,-1,-1},
            {-1,00,-1,-1,-1,00,-1,-1,-1,00,-1,00,00,-1,00,-1,00,-1,-1,-1,00,-1,-1,-1,00,-1,00,00,00,-1,-1},
            {-1,00,00,00,00,00,00,-1,-1,00,-1,-1,00,-1,00,-1,00,-1,00,-1,00,-1,-1,-1,00,-1,00,-1,-1,00,-1},
            {-1,-1,-1,00,-1,-1,00,-1,00,00,-1,-1,00,-1,00,00,00,00,00,-1,00,-1,-1,00,00,-1,00,-1,-1,00,-1},
            {-1,00,-1,00,-1,-1,00,-1,-1,00,-1,00,00,-1,00,-1,00,-1,-1,-1,00,-1,-1,00,-1,-1,00,00,00,00,-1},
            {-1,00,-1,00,-1,-1,00,00,00,00,-1,-1,00,-1,00,-1,00,-1,00,00,00,-1,00,00,-1,-1,-1,-1,-1,00,-1},
            {-1,00,-1,00,00,00,00,-1,-1,00,-1,-1,00,-1,-1,00,00,-1,-1,-1,00,-1,-1,00,00,-1,-1,-1,-1,00,-1},
            {-1,00,-1,-1,-1,-1,-1,00,-1,00,00,-1,00,00,-1,00,-1,00,-1,00,-1,-1,00,-1,00,-1,-1,-1,00,00,-1},
            {-1,00,-1,00,00,00,-1,00,00,00,-1,-1,00,-1,-1,00,-1,00,-1,00,-1,-1,00,-1,00,-1,00,00,00,-1,-1},
            {-1,00,00,00,-1,00,00,00,-1,00,-1,00,00,00,-1,00,-1,00,-1,00,00,00,00,00,00,-1,-1,-1,00,-1,-1},
            {-1,-1,00,-1,00,00,-1,00,-1,00,-1,00,-1,00,-1,00,00,00,-1,-1,00,-1,00,-1,00,-1,00,-1,00,-1,-1},
            {-1,-1,00,00,00,-1,-1,-1,-1,-1,-1,00,-1,00,-1,00,-1,-1,-1,-1,00,-1,00,-1,00,-1,00,-1,00,00,-1},
            {-1,00,-1,-1,-1,-1,-1,00,00,00,00,00,-1,00,00,00,00,00,-1,00,00,00,00,00,00,00,00,-1,00,-1,-1},
            {-1,00,00,00,00,00,00,00,-1,00,-1,-1,-1,-1,-1,-1,-1,00,-1,00,-1,00,-1,-1,-1,-1,00,-1,-1,-1,-1},
            {-1,00,-1,00,00,-1,-1,00,-1,00,-1,00,00,-1,00,00,-1,00,-1,00,-1,00,-1,-1,00,-1,00,-1,-1,00,-1},
            {-1,00,-1,-1,00,00,-1,00,-1,00,-1,00,-1,-1,00,-1,-1,00,-1,00,-1,00,00,-1,00,00,00,00,00,00,-1},
            {-1,00,00,00,-1,-1,-1,-1,-1,-1,-1,00,00,00,00,-1,00,00,-1,00,-1,-1,-1,-1,-1,-1,-1,00,-1,-1,-1},
            {-1,-1,-1,00,-1,00,00,00,00,00,-1,00,00,-1,00,-1,00,-1,-1,00,00,00,-1,00,00,-1,-1,00,-1,-1,-1},
            {-1,00,-1,00,-1,00,-1,-1,-1,00,-1,00,-1,-1,00,-1,00,-1,-1,-1,-1,00,-1,-1,00,00,00,00,-1,-1,-1},
            {-1,00,-1,00,-1,00,-1,-1,-1,00,-1,00,00,-1,00,-1,00,-1,-1,00,00,00,00,-1,-1,-1,-1,00,00,-1,-1},
            {-1,00,00,00,00,00,00,-1,-1,00,-1,-1,00,-1,00,-1,00,-1,-1,00,-1,-1,00,0,00,-1,-1,-1,00,-1,-1},
            {-1,-1,-1,00,-1,-1,00,-1,00,00,-1,-1,00,-1,00,00,00,00,00,00,-1,-1,00,-1,00,00,00,00,00,00,-1},
            {-1,00,00,00,-1,-1,-1,-1,-1,00,00,00,00,-1,00,-1,00,-1,-1,-1,-1,-1,00,-1,00,-1,-1,00,-1,00,-1},
            {-1,00,-1,00,-1,00,00,-1,-1,00,-1,-1,00,-1,00,-1,00,-1,00,00,00,-1,00,-1,-1,-1,-1,00,-1,00,-1},
            {-1,00,-1,00,00,00,00,00,-1,00,-1,-1,00,-1,-1,00,00,-1,00,-1,00,-1,00,-1,00,00,00,00,-1,00,-1},
            {-1,00,-1,-1,-1,-1,-1,00,-1,00,00,-1,00,00,-1,00,-1,00,-1,-1,00,-1,00,-1,-1,00,-1,-1,-1,00,-1},
            {-1,00,-1,00,00,00,-1,00,-1,00,-1,-1,00,-1,-1,00,-1,00,-1,-1,00,-1,00,00,00,00,-1,-1,00,00,-1},
            {-1,00,00,00,-1,00,-1,00,-1,00,-1,00,00,00,-1,00,-1,00,-1,-1,00,-1,00,-1,-1,-1,00,-1,00,-1,-1},
            {-1,-1,00,-1,00,00,-1,00,-1,00,-1,00,-1,00,-1,00,00,00,00,00,00,-1,00,00,00,-1,00,00,00,-1,-1},
            {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        };
int mat[100][100]={
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
            {-1,00,-1,-1,-1,-1,-1,00,00,00,00,00,00,00,00,00,00,00,00,00,-1,00,00,00,00,00,00,00,00,00,-1},
            {-1,00,00,00,00,00,00,00,-1,00,-1,-1,-1,-1,-1,-1,-1,00,-1,00,-1,-1,-1,-1,00,-1,00,-1,00,-1,-1},
            {-1,00,-1,00,00,-1,-1,00,-1,00,-1,00,00,-1,00,00,-1,00,-1,00,-1,-1,-1,00,-1,-1,00,-1,00,-1,-1},
            {-1,00,-1,-1,00,00,-1,00,-1,00,-1,00,-1,-1,00,-1,-1,00,-1,00,-1,00,00,00,00,00,00,00,00,00,-1},
            {-1,00,00,00,-1,-1,-1,-1,-1,-1,-1,00,-1,00,00,-1,00,00,-1,00,-1,-1,-1,00,-1,-1,-1,-1,00,-1,-1},
            {-1,00,-1,-1,-1,00,00,-1,00,00,-1,00,00,-1,00,-1,00,-1,-1,00,-1,-1,00,00,00,00,00,00,00,00,-1},
            {-1,00,-1,-1,-1,00,-1,-1,-1,00,-1,00,-1,-1,00,00,00,-1,00,00,00,-1,00,-1,00,-1,00,-1,00,-1,-1},
            {-1,00,-1,-1,-1,00,-1,-1,-1,00,-1,00,00,-1,00,-1,00,-1,-1,-1,00,-1,-1,-1,00,-1,00,00,00,-1,-1},
            {-1,00,00,00,00,00,00,-1,-1,00,-1,-1,00,-1,00,-1,00,-1,00,-1,00,-1,-1,-1,00,-1,00,-1,-1,00,-1},
            {-1,-1,-1,00,-1,-1,00,-1,00,00,-1,-1,00,-1,00,00,00,00,00,-1,00,-1,-1,00,00,-1,00,-1,-1,00,-1},
            {-1,00,-1,00,-1,-1,00,-1,-1,00,-1,00,00,-1,00,-1,00,-1,-1,-1,00,-1,-1,00,-1,-1,00,00,00,00,-1},
            {-1,00,-1,00,-1,-1,00,00,00,00,-1,-1,00,-1,00,-1,00,-1,00,00,00,-1,00,00,-1,-1,-1,-1,-1,00,-1},
            {-1,00,-1,00,00,00,00,-1,-1,00,-1,-1,00,-1,-1,00,00,-1,-1,-1,00,-1,-1,00,00,-1,-1,-1,-1,00,-1},
            {-1,00,-1,-1,-1,-1,-1,00,-1,00,00,-1,00,00,-1,00,-1,00,-1,00,-1,-1,00,-1,00,-1,-1,-1,00,00,-1},
            {-1,00,-1,00,00,00,-1,00,00,00,-1,-1,00,-1,-1,00,-1,00,-1,00,-1,-1,00,-1,00,-1,00,00,00,-1,-1},
            {-1,00,00,00,-1,00,00,00,-1,00,-1,00,00,00,-1,00,-1,00,-1,00,00,00,00,00,00,-1,-1,-1,00,-1,-1},
            {-1,-1,00,-1,00,00,-1,00,-1,00,-1,00,-1,00,-1,00,00,00,-1,-1,00,-1,00,-1,00,-1,00,-1,00,-1,-1},
            {-1,-1,00,00,00,-1,-1,-1,-1,-1,-1,00,-1,00,-1,00,-1,-1,-1,-1,00,-1,00,-1,00,-1,00,-1,00,00,-1},
            {-1,00,-1,-1,-1,-1,-1,00,00,00,00,00,-1,00,00,00,00,00,-1,00,00,00,00,00,00,00,00,-1,00,-1,-1},
            {-1,00,00,00,00,00,00,00,-1,00,-1,-1,-1,-1,-1,-1,-1,00,-1,00,-1,00,-1,-1,-1,-1,00,-1,-1,-1,-1},
            {-1,00,-1,00,00,-1,-1,00,-1,00,-1,00,00,-1,00,00,-1,00,-1,00,-1,00,-1,-1,00,-1,00,-1,-1,00,-1},
            {-1,00,-1,-1,00,00,-1,00,-1,00,-1,00,-1,-1,00,-1,-1,00,-1,00,-1,00,00,-1,00,00,00,00,00,00,-1},
            {-1,00,00,00,-1,-1,-1,-1,-1,-1,-1,00,00,00,00,-1,00,00,-1,00,-1,-1,-1,-1,-1,-1,-1,00,-1,-1,-1},
            {-1,-1,-1,00,-1,00,00,00,00,00,-1,00,00,-1,00,-1,00,-1,-1,00,00,00,-1,00,00,-1,-1,00,-1,-1,-1},
            {-1,00,-1,00,-1,00,-1,-1,-1,00,-1,00,-1,-1,00,-1,00,-1,-1,-1,-1,00,-1,-1,00,00,00,00,-1,-1,-1},
            {-1,00,-1,00,-1,00,-1,-1,-1,00,-1,00,00,-1,00,-1,00,-1,-1,00,00,00,00,-1,-1,-1,-1,00,00,-1,-1},
            {-1,00,00,00,00,00,00,-1,-1,00,-1,-1,00,-1,00,-1,00,-1,-1,00,-1,-1,00,0,00,-1,-1,-1,00,-1,-1},
            {-1,-1,-1,00,-1,-1,00,-1,00,00,-1,-1,00,-1,00,00,00,00,00,00,-1,-1,00,-1,00,00,00,00,00,00,-1},
            {-1,00,00,00,-1,-1,-1,-1,-1,00,00,00,00,-1,00,-1,00,-1,-1,-1,-1,-1,00,-1,00,-1,-1,00,-1,00,-1},
            {-1,00,-1,00,-1,00,00,-1,-1,00,-1,-1,00,-1,00,-1,00,-1,00,00,00,-1,00,-1,-1,-1,-1,00,-1,00,-1},
            {-1,00,-1,00,00,00,00,00,-1,00,-1,-1,00,-1,-1,00,00,-1,00,-1,00,-1,00,-1,00,00,00,00,-1,00,-1},
            {-1,00,-1,-1,-1,-1,-1,00,-1,00,00,-1,00,00,-1,00,-1,00,-1,-1,00,-1,00,-1,-1,00,-1,-1,-1,00,-1},
            {-1,00,-1,00,00,00,-1,00,-1,00,-1,-1,00,-1,-1,00,-1,00,-1,-1,00,-1,00,00,00,00,-1,-1,00,00,-1},
            {-1,00,00,00,-1,00,-1,00,-1,00,-1,00,00,00,-1,00,-1,00,-1,-1,00,-1,00,-1,-1,-1,00,-1,00,-1,-1},
            {-1,-1,00,-1,00,00,-1,00,-1,00,-1,00,-1,00,-1,00,00,00,00,00,00,-1,00,00,00,-1,00,00,00,-1,-1},
            {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
        };


public :; void imprimirLab(){
	system("CLS");
	cout<<"\n";
	for(int i=0;i<37;i++){
		cout<<"\t";
		for(int j=0;j<31;j++){
			if(mat[i][j]==-4){
				cout<<"\033[0;31m";
				cout<<"[I]";
			}else{
				if(mat[i][j]==-3){
				cout<<"\033[0;31m";
				cout<<"[D]";
				}else{
					if(mat[i][j]==-1){
						cout<<"\033[0m";
						cout<<"|||";
					}else{
						if(mat[i][j]==00){
						cout<<"   ";
			 			}else{
			 				if(mat[i][j]==5){
			 					cout<<"\033[0;32m";
								cout<<"[O]";
							}else{
								cout<<"\033[0;36m";
								cout<<"[X]";	
							}	
		 				}	
					}	
				}	
			}
		}
		cout<<endl;
	}
}
public :; void generaNuevo(){
	 	bool valido = false;
	 	int col,fil,cold,fild;
	 		for(int i=0;i<37;i++){
		for(int j=0;j<31;j++){
			mat[i][j]=mataux[i][j];
		}
	}
	 	while(valido == false){
	 		col=rand()%31;
	 		fil=rand()%37;
	 			if(mat[fil][col]!=-1){
	 				valido=true;
				 }
		 }
		 valido=false;
		 	 	while(valido == false){
	 		cold=rand()%31;
	 		fild=rand()%37;
	 			if(mat[fild][cold]!=-1 && fil!=fild && col != cold){
	 				valido=true;
				 }
		 }
		 valido=false;
		 for(int i=0; i<37; i++){
		 	for(int j=0; j<31; j++){
		 		mat[i][j]=mataux[i][j];
			 }
		 }
		 RecorridoAnchura(fil,col,fild,cold);
	 }
public :; void RecorridoAnchura(int f,int c, int fd, int cd){
	int anterior;
	mat[f][c]=-4;
	mat[fd][cd]=-3;
	imprimirLab();
	system("pause");
	while(true){
			 //CONDICIONES DE RECORRIDO	
		if(mat[f-1][c]==00){
			cola.push({f-1,c});
			mat[f-1][c]=(mat[f][c])-1;	
		}
		if(mat[f][c-1]==00 ){
			cola.push({f,c-1});
			mat[f][c-1]=(mat[f][c])-1;
		}
		if(mat[f+1][c]==00 ){
			cola.push({f+1,c});
			mat[f+1][c]=(mat[f][c])-1;
		}
		if(mat[f][c+1]==00){
			cola.push({f,c+1});
			mat[f][c+1]=(mat[f][c])-1;
		}
		//CONDICIONES DE ENCUENTRO DE DESTINO
			if(mat[f-1][c]==-3){
			mat[f-1][c]=(mat[f][c])-1;
			break;
		}
		else if(mat[f][c-1]==-3 ){
			mat[f][c-1]=(mat[f][c])-1;
			break;
		}
		else if(mat[f+1][c]==-3 ){
			mat[f+1][c]=(mat[f][c])-1;
			break;
		}
		else if(mat[f][c+1]==-3){
			mat[f][c+1]=(mat[f][c])-1;
			break;
		}
		else{
			imprimirLab();
			pair <int,int> current=cola.front();
			cola.pop();
			f=current.first;
			c=current.second;
		}

	}
	f=fd;
	c=cd;
	anterior=mat[fd][cd];
	mat[fd][cd]=-3;
	
	while(true){
		if(mat[f-1][c]==anterior+1){
			anterior=mat[f-1][c];
			mat[f-1][c]=5;	
			f=f-1;
		}
		if(mat[f][c-1]==anterior+1){
			anterior=mat[f][c-1];
			mat[f][c-1]=5;
			c=c-1;
		}
		if(mat[f+1][c]==anterior+1 ){
			anterior=mat[f+1][c];
			mat[f+1][c]=5;
			f=f+1;
		}
		if(mat[f][c+1]==anterior+1){
			anterior=mat[f][c+1];
			mat[f][c+1]=5;
			c=c+1;
		}
	//checa si llegamos al final
		if(mat[f-1][c]==-4){
		imprimirLab();
		break;
		}
		else if(mat[f][c-1]==-4 ){
			imprimirLab();
			break;
		}
		else if(mat[f+1][c]==-4){
			imprimirLab();
			break;
		}
		else if(mat[f][c+1]==-4){
			imprimirLab();
			break;
		}
		imprimirLab();
	}
	while(!cola.empty()){
		cola.pop();
	}
}	
	
	 	
};
 int main(){
 	srand(time(NULL));
 	int opc=0;
	class Grafo obj;
	obj.generaNuevo();
	do{
		cout<<"\n\t1.- Generar un nuevo camino";
		cout<<"\n\t2.- Salir\n\n\tOpcion: ";
		cin>>opc;
		if (opc==1){
			system("cls");
			obj.generaNuevo();
		}
	}while(opc!=2);

}
